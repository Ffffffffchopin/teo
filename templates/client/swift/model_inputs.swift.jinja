{%- for model in models %}
public class {{ model.name }}Select: Encodable {
{%- for field in model.select %}
    public let {{ field|escape_swift }}: Bool?
{%- endfor %}
    public init(
{%- for field in model.select %}
        {{ field|escape_swift }}: Bool? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in model.select %}
        self.{{ field }} = {{ field|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}Include: Encodable {
{%- for include in model.includes %}
    public let {{ include.relation_name|escape_swift }}: {{ include.model_name }}{%- if include.many -%}FindMany{%- endif -%}Args?
{%- endfor %}
    public init(
{%- for include in model.includes %}
        {{ include.relation_name|escape_swift }}: {{ include.model_name }}{%- if include.many -%}FindMany{%- endif -%}Args? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for include in model.includes %}
        self.{{ include.relation_name }} = {{ include.relation_name|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}WhereInput: Encodable {
    public let AND: [{{ model.name }}WhereInput]?
    public let OR: [{{ model.name }}WhereInput]?
    public let NOT: {{ model.name }}WhereInput?
{%- for field in model.where_fields %}
    public let {{ field.name|escape_swift }}: {{ field.filter_type }}?
{%- endfor %}
    public init(
        AND: [{{ model.name }}WhereInput]? = nil,
        OR: [{{ model.name }}WhereInput]? = nil,
        NOT: {{ model.name }}WhereInput? = nil,
{%- for field in model.where_fields %}
        {{ field.name|escape_swift }}: {{ field.filter_type }}? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in model.where_fields %}
        self.{{ field.name }} = {{ field.name|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}WhereUniqueInput: Encodable {
{%- for field in model.where_unique_fields %}
    public let {{ field.name|escape_swift }}: {{ field.create_type }}?
{%- endfor %}
    public init(
{%- for field in model.where_unique_fields %}
        {{ field.name|escape_swift }}: {{ field.create_type }}? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in model.where_unique_fields %}
        self.{{ field.name }} = {{ field.name|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}RelationFilter: Encodable {
    public let `is`: {{ model.name }}WhereInput?
    public let isNot: {{ model.name }}WhereInput?
    public init(
        `is`: {{ model.name }}WhereInput? = nil,
        isNot: {{ model.name }}WhereInput? = nil
    ) {
        self.is = `is`
        self.isNot = isNot
    }
}
public class {{ model.name }}ListRelationFilter: Encodable {
    public let every: {{ model.name }}WhereInput?
    public let some: {{ model.name }}WhereInput?
    public let none: {{ model.name }}WhereInput?
    public init(
        every: {{ model.name }}WhereInput? = nil,
        some: {{ model.name }}WhereInput? = nil,
        none: {{ model.name }}WhereInput? = nil
    ) {
        self.every = every
        self.some = some
        self.none = none
    }
}
public enum {{ model.name }}OrderByInput: Encodable {
{%- for field in model.order_by_fields %}
    case {{ field|escape_swift }}(SortOrder)
{%- endfor %}
    enum CodingKeys: CodingKey {
{%- for field in model.order_by_fields %}
        case {{ field|escape_swift }}
{%- endfor %}
    }
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: {{ model.name }}OrderByInput.CodingKeys.self)
        switch self {
{%- for field in model.order_by_fields %}
        case .{{ field }}(let a0):
            try container.encode(a0, forKey: .{{ field }})
{%- endfor %}
        }
    }
}
{%- for without in model.without %}
public class {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
{%- for field in model.create_fields %}
    {% if without.as_ref() != field.name.as_ref() %}public let {{ field.name|escape_swift }}: {{ field.create_type }}?{%- endif %}
{%- endfor %}
    public init(
{%- for field in model.create_fields_without(without.as_ref()) %}
        {{ field.name|escape_swift }}: {{ field.create_type }}? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in model.create_fields_without(without.as_ref()) %}
        self.{{ field.name }} = {{ field.name|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}CreateNestedMany{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let create: [{{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let connectOrCreate: [{{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let connect: [{{ model.name }}WhereUniqueInput]?
    public init(
        create: [{{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        connectOrCreate: [{{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        connect: [{{ model.name }}WhereUniqueInput]? = nil
    ) {
        self.create = create
        self.connectOrCreate = connectOrCreate
        self.connect = connect
    }
}
public class {{ model.name }}CreateNestedOne{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let connectOrCreate: {{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let connect: {{ model.name }}WhereUniqueInput?
    public init(
        create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        connectOrCreate: {{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        connect: {{ model.name }}WhereUniqueInput? = nil
    ) {
        self.create = create
        self.connectOrCreate = connectOrCreate
        self.connect = connect
    }
}
public class {{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let `where`: {{ model.name }}WhereUniqueInput?
    public let create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public init(
        `where`: {{ model.name }}WhereUniqueInput? = nil,
        create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil
    ) {
        self.where = `where`
        self.create = create
    }
}
public class {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
{%- for field in model.update_fields %}
    {% if without.as_ref() != field.name.as_ref() %}public let {{ field.name|escape_swift }}: {{ field.update_type }}?{%- endif %}
{%- endfor %}
    public init(
{%- for field in model.update_fields_without(without.as_ref()) %}
        {{ field.name|escape_swift }}: {{ field.update_type }}? = nil{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in model.update_fields_without(without.as_ref()) %}
        self.{{ field.name }} = {{ field.name|escape_swift }}
{%- endfor %}
    }
}
public class {{ model.name }}UpdateNestedMany{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let create: [{{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let connectOrCreate: [{{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let connect: [{{ model.name }}WhereUniqueInput]?
    public let `set`: [{{ model.name }}WhereUniqueInput]?
    public let update: [{{ model.name }}UpdateWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let upsert: [{{ model.name }}UpsertWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let disconnect: [{{ model.name }}WhereUniqueInput]?
    public let delete: [{{ model.name }}WhereUniqueInput]?
    public let updateMany: [{{ model.name }}UpdateManyWithWhere{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]?
    public let deleteMany: [{{ model.name }}WhereInput]?
    public init(
        create: [{{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        connectOrCreate: [{{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        connect: [{{ model.name }}WhereUniqueInput]? = nil,
        `set`: [{{ model.name }}WhereUniqueInput]? = nil,
        update: [{{ model.name }}UpdateWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        upsert: [{{ model.name }}UpsertWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        disconnect: [{{ model.name }}WhereUniqueInput]? = nil,
        delete: [{{ model.name }}WhereUniqueInput]? = nil,
        updateMany: [{{ model.name }}UpdateManyWithWhere{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input]? = nil,
        deleteMany: [{{ model.name }}WhereInput]? = nil
    ) {
        self.create = create
        self.connectOrCreate = connectOrCreate
        self.connect = connect
        self.set = `set`
        self.update = update
        self.upsert = upsert
        self.disconnect = disconnect
        self.delete = delete
        self.updateMany = updateMany
        self.deleteMany = deleteMany
    }
}
public class {{ model.name }}UpdateNestedOne{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let connectOrCreate: {{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let connect: {{ model.name }}WhereUniqueInput?
    public let `set`: {{ model.name }}WhereUniqueInput?
    public let update: {{ model.name }}UpdateWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let upsert: {{ model.name }}UpsertWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let disconnect: Bool?
    public let delete: Bool?
    public init(
        create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        connectOrCreate: {{ model.name }}ConnectOrCreate{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        connect: {{ model.name }}WhereUniqueInput? = nil,
        `set`: {{ model.name }}WhereUniqueInput? = nil,
        update: {{ model.name }}UpdateWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        upsert: {{ model.name }}UpsertWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        disconnect: Bool? = nil,
        delete: Bool? = nil
    ) {
        self.create = create
        self.connectOrCreate = connectOrCreate
        self.connect = connect
        self.set = `set`
        self.update = update
        self.upsert = upsert
        self.disconnect = disconnect
        self.delete = delete
    }
}
public class {{ model.name }}UpdateWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let `where`: {{ model.name }}WhereUniqueInput?
    public let update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public init(
        `where`: {{ model.name }}WhereUniqueInput? = nil,
        update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil
    ) {
        self.where = `where`
        self.update = update
    }
}
public class {{ model.name }}UpdateManyWithWhere{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Encodable {
    public let `where`: {{ model.name }}WhereInput?
    public let update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public init(
        `where`: {{ model.name }}WhereInput? = nil,
        update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil
    ) {
        self.where = `where`
        self.update = update
    }
}
public class {{ model.name }}UpsertWithWhereUnique{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input: Decodable {
    public let `where`: {{ model.name }}WhereUniqueInput?
    public let update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public let create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input?
    public init(
        `where`: {{ model.name }}WhereUniqueInput? = nil,
        update: {{ model.name }}Update{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil,
        create: {{ model.name }}Create{%- if !without.is_empty() %}Without{{ without.as_ref()|capitalize_first }}{%- endif %}Input? = nil
    ) {
        self.where = `where`
        self.update = update
        self.create = create
    }
}
{%- endfor %}
{%- for action_arg in model.action_args %}
public class {{ model.name }}{{ action_arg.name }}: Encodable {
{%- for field in action_arg.sorted_fields() %}
    /// {{ field.docs }}
    public let {{ field.name|escape_swift }}: {{ field.field_type }}{%- if field.optional %}?{%- endif %}
{%- endfor %}
    public init(
{%- for field in action_arg.sorted_fields() %}
        {{ field.name|escape_swift }}: {{ field.field_type }}{%- if field.optional %}? = nil{%- endif %}{% if !loop.last %},{% endif %}
{%- endfor %}
    ) {
{%- for field in action_arg.sorted_fields() %}
        self.{{ field.name }} = {{ field.name|escape_swift }}
{%- endfor %}
    }
}
{%- endfor %}
{%- endfor %}
